////////////////// version 1.2 //////////////////
(Sunny)

PRIMARY CHANGES:
--- collisions:
  Functions have been set up in collisions.h/cpp to support most* triangle rectangle collisions.
    *The collision may not be detected if the rectangle has a slim, long shape in comparison to the triangle, and is moving quickly.
--- Enemies:
    Add the enemies to the game.
--- bullet:
    Add bullets to the game. The e key is to shoot.


--- structural:
  All GameObject classes now have an 'id' variable, which stores an enumerated code for the object type (may currently be HERO, PLATFORM, ENEMY, or SPIKE).

  The Shape struct now contains a 'type' variable, which stores an enumerated code for the shape type (may currently be RECTANGLE or TRIANGLE)

  Both the Shape:type and GameObject:id variables are set in the class constructors for Hero, Spike, Platform, and BasicEnemy



--- additions:
  Unit testing is currently being added for modules in the game. Some of the less relevant / simpler modules may be skipped.




////////////////// version 1.1 //////////////////
(Sunny/Mark)

CHANGES:
--- ALL CLASSES:
  Class names have been update to reflect naming conventions (start all class names with Upper Case letter). Declarations throughout the project have been adjusted accordingly.



--- Rooms:
  File format has been changed so that each platform's information is stored on one line, with each piece of information separated by a comma (CSV file). The format for a single line (platform) is as follows:
    (int)width,(int)height,(int)center-x,(int)center-y,(str)type
    - where type may currently be GROUND or SPIKE (no difference yet in functionality)

  main.cpp and the Game class has been fixed to ensure rooms are loaded in the correct positions, and that switching between rooms is consistent



--- platform.h:
  added variable 'type' to track the platform type

  added enumeration value for 'type' within class:
    GROUND
    SPIKE



--- platform.cpp:
  takes a 5th parameter 'ptype' used to set 'type'



--- main.cpp:
  removed 'initializeLevels()', and the corresponding call, from main.cpp and place it in game.cpp as 'initLevels()'

  abstracted level access and room changing to Game class



--- game.h:
  changed structure of level array to make more sense

  removed the Levels*** parameter, since 'initLevels()' is now called directly in the constructor

  added 'initLevel()' and 'fillLevel()' which are called in the constructor

  changed the Level*** to a 2D-vector

  added 'totalVertial' and 'totalHorizontal' to store the dimensions of the level in one place

  added methods for for changing rooms, and returning pointer to current room



--- game.cpp:
  added initLevels(), which allocates 20 rooms across by 5 down in 'level'

  added fillLevels(), which reads in platform data from files, and fills the corresponding rooms with platforms

  constructor calls the above 2 functions, and sets 'totalVertical' and 'totalHorizontal'



--- room.h/room.cpp (previously level.h/level.cpp):
  changed the class name to more accurately reflect its purpose



